apiVersion: v1
kind: Service
metadata:
  name: search-api
  namespace: aleph
  labels:
    app: search-api
spec:
  selector:
    app: search-api
  ports:
    - port: 8000
      targetPort: 8000
      protocol: "TCP"
      name: api
---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: search-api
  namespace: aleph
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: search-api
  minReplicas: {{ .Values.api.minReplicas }}
  maxReplicas: {{ .Values.api.maxReplicas }}
  metrics:
  - type: Resource
    resource:
      name: cpu
      targetAverageUtilization: 70
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: search-api
  namespace: aleph
  labels:
    app: search-api
spec:
  selector:
    matchLabels:
      app: search-api
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 50%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: search-api
    spec:
      affinity: # Ask k8s to preferr that pods are placed across zones if available
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - {{ .Values.global.reponame }}
              topologyKey: failure-domain.beta.kubernetes.io/zone
      restartPolicy: Always
      containers:
        - name: search-api
          image: alephdata/aleph:{{ .Values.global.imagetag }}
          imagePullPolicy: Always
          command:
            - gunicorn 
            - -t
            - '84600'
            - -w
            - '8'
            - -b
            - 0.0.0.0:8000
            - --max-requests
            - '1000'
            - --log-level
            - debug
            - --log-file
            - '-'
            - aleph.manage:app
          resources:
            requests:
              memory: {{ .Values.api.resources.requests.memory }}
              cpu: {{ .Values.api.resources.requests.cpu }}
            limits:
              memory: {{ .Values.api.resources.limits.memory }}
              cpu: {{ .Values.api.resources.limits.cpu }}
          env:
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /credentials/service-account.json
          envFrom:
            - configMapRef:
                name: search-config
            - secretRef:
                name: common-secrets
          volumeMounts:
            - mountPath: /credentials
              name: service-account-app
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8000
            initialDelaySeconds: 15
            timeoutSeconds: 4
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8000
            initialDelaySeconds: 15
            timeoutSeconds: 4
            periodSeconds: 5
        - name: search-db-sidecar
          resources:
            requests:
              memory: 64Mi
              cpu: "0.1"
            limits:
              memory: 64Mi
              cpu: "0.1"
          image: b.gcr.io/cloudsql-docker/gce-proxy:latest
          imagePullPolicy: Always
          command:
            - /cloud_sql_proxy
            - -dir=/cloudsql
            - -instances={{ .Values.global.dbInstance }}
            - -credential_file=/credentials/service-account.json
          livenessProbe:
            exec:
              command:
                - nc
                - -z
                - 127.0.0.1
                - "5432"
          readinessProbe:
            exec:
              command:
                - nc
                - -z
                - 127.0.0.1
                - "5432"
          volumeMounts:
            - mountPath: /credentials
              name: service-account-db
      volumes:
        - name: service-account-app
          secret:
            secretName: service-account-app
        - name: service-account-db
          secret:
            secretName: service-account-db
